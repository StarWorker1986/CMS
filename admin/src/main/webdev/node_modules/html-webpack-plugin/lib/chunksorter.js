"use strict";

const toposort = require("toposort");
const _ = require("lodash");

module.exports.dependency = function (chunks) {
  if (!chunks) {
    return chunks;
  }

  let nodeMap = {};

  chunks.forEach(function (chunk) {
    nodeMap[chunk.id] = chunk;
  });

  // Next, we add an edge for each parent relationship into the graph
  let edges = [];

  chunks.forEach(function (chunk) {
    if (chunk.parents) {
      chunk.parents.forEach(function (parentId) {
        let parentChunk = _.isObject(parentId) ? parentId : nodeMap[parentId];
        if (parentChunk) {
          edges.push([parentChunk, chunk]);
        }
      });
    }
  });
  return toposort.array(chunks, edges);
};

module.exports.id = function (chunks) {
  return chunks.sort(function orderEntryLast (a, b) {
    if (a.entry !== b.entry) {
      return b.entry ? 1 : -1;
    } else {
      return b.id - a.id;
    }
  });
};

module.exports.none = function (chunks) {
  return chunks;
};

module.exports.manual = function (chunks, specifyChunks) {
    let chunksResult = [], filterResult = [];
    if (Array.isArray(specifyChunks)) {
        for (var i = 0; i < specifyChunks.length; i++) {
            filterResult = chunks.filter(function (chunk) {
                if (chunk.names[0] && chunk.names[0] === specifyChunks[i]) {
                    return true;
                }
                return false;
            });
            filterResult.length > 0 && chunksResult.push(filterResult[0]);
        }
    }
    return chunksResult;
};

module.exports.auto = module.exports.dependency;
